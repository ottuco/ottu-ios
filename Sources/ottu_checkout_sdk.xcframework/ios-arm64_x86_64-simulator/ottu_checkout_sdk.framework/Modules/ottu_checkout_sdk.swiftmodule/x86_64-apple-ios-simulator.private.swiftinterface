// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ottu_checkout_sdk
// swift-module-flags-ignorable: -enable-bare-slash-regex
import DeveloperToolsSupport
import Foundation
import PassKit
import SVGKit
import Sentry
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import ottu_checkout_sdk
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var isShimmering: Swift.Bool {
    get
    set
  }
}
public struct SentryConfig {
  public struct Traces {
    public let sampleRate: Foundation.NSNumber
    public let profilingSampleRate: Foundation.NSNumber
    public let enableAppStart: Swift.Bool
    public init(sampleRate: Foundation.NSNumber, profilingSampleRate: Foundation.NSNumber, enableAppStart: Swift.Bool)
  }
  public let dsn: Swift.String
  public let isEnabled: Swift.Bool
  public let userInteraction: Swift.Bool
  public let attachScreenshot: Swift.Bool
  public let attachViewHierarchy: Swift.Bool
  public let traces: ottu_checkout_sdk.SentryConfig.Traces
  public init(dsn: Swift.String, isEnabled: Swift.Bool, userInteraction: Swift.Bool, attachScreenshot: Swift.Bool, attachViewHierarchy: Swift.Bool, traces: ottu_checkout_sdk.SentryConfig.Traces)
}
final public class SentryConfigFetcher {
  public typealias Result = Swift.Result<ottu_checkout_sdk.SentryConfig, ottu_checkout_sdk.SentryConfigFetcher.Error>
  public enum Error : Swift.Error {
    case connectivity
    case invalidData
    public static func == (a: ottu_checkout_sdk.SentryConfigFetcher.Error, b: ottu_checkout_sdk.SentryConfigFetcher.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Request {
    public typealias JSONDictionary = [Swift.String : Any]
    public init(merchantId: Swift.String)
  }
  public init(url: Foundation.URL, client: any ottu_checkout_sdk.HTTPClient)
  final public func fetch(merchantId: Swift.String, completion: @escaping (ottu_checkout_sdk.SentryConfigFetcher.Result) -> Swift.Void)
  @objc deinit
}
public enum PaymentModeType : Swift.String {
  case sandbox
  case production
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct TransactionDetails : Swift.Equatable {
  public enum Language : Swift.String {
    case en
    case ar
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum State : Swift.String {
    case created
    case pending
    case attempted
    case authorized
    case paid
    case failed
    case canceled
    case expired
    case invalided
    case refunded
    case cod
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var amount: Foundation.Decimal
  public var cards: [ottu_checkout_sdk.Card]
  public var customerId: Swift.String?
  public var customerPhone: Swift.String?
  public var currencyCode: Swift.String
  public var language: ottu_checkout_sdk.TransactionDetails.Language
  public var operation: Swift.String
  public var paymentMethods: [ottu_checkout_sdk.PaymentMethod]
  public let applePayService: ottu_checkout_sdk.ApplePayService?
  public let stcPayService: ottu_checkout_sdk.StcPayService?
  public var response: ottu_checkout_sdk.TransactionDetailsResponse
  public var state: ottu_checkout_sdk.TransactionDetails.State
  public var type: ottu_checkout_sdk.PaymentTransactionType
  public var isAmountEditable: Swift.Bool
  public var sessionId: Swift.String
  public init(amount: Foundation.Decimal, cards: [ottu_checkout_sdk.Card], customerId: Swift.String?, customerPhone: Swift.String?, currencyCode: Swift.String, language: ottu_checkout_sdk.TransactionDetails.Language, operation: Swift.String, paymentMethods: [ottu_checkout_sdk.PaymentMethod], applePayService: ottu_checkout_sdk.ApplePayService?, stcPayService: ottu_checkout_sdk.StcPayService?, response: ottu_checkout_sdk.TransactionDetailsResponse, state: ottu_checkout_sdk.TransactionDetails.State, type: ottu_checkout_sdk.PaymentTransactionType, isAmountEditable: Swift.Bool, sessionId: Swift.String)
  public static func == (a: ottu_checkout_sdk.TransactionDetails, b: ottu_checkout_sdk.TransactionDetails) -> Swift.Bool
}
public struct PaymentMethod : Swift.Equatable {
  public enum Flow : Swift.String {
    case redirect
    case ottuPG
    case stcPay
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var code: Swift.String
  public var name: Swift.String
  public var pg: Swift.String
  public var type: ottu_checkout_sdk.PaymentModeType
  public var amount: Foundation.Decimal
  public var currencyCode: Swift.String
  public var fee: Foundation.Decimal
  public var feeDescription: Swift.String?
  public var icon: Foundation.URL
  public var flow: ottu_checkout_sdk.PaymentMethod.Flow
  public var redirectURL: Foundation.URL?
  public var canSaveCard: Swift.Bool
  public var submitURL: Foundation.URL?
  public init(code: Swift.String, name: Swift.String, pg: Swift.String, type: ottu_checkout_sdk.PaymentModeType, amount: Foundation.Decimal, currencyCode: Swift.String, fee: Foundation.Decimal, feeDescription: Swift.String?, icon: Foundation.URL, flow: ottu_checkout_sdk.PaymentMethod.Flow, redirectURL: Foundation.URL?, canSaveCard: Swift.Bool, submitURL: Foundation.URL?)
  public static func == (a: ottu_checkout_sdk.PaymentMethod, b: ottu_checkout_sdk.PaymentMethod) -> Swift.Bool
}
public struct ApplePayService : Swift.Equatable {
  public var domain: Swift.String
  public var merchantId: Swift.String
  public var code: Swift.String
  public var shopName: Swift.String
  public var amount: Foundation.Decimal
  public var fee: Foundation.Decimal
  public var feeDescription: Swift.String
  public var currencyCode: Swift.String
  public var countryCode: Swift.String
  public var validationURL: Foundation.URL
  public var paymentURL: Foundation.URL
  public var sessionId: Swift.String
  public init(domain: Swift.String, merchantId: Swift.String, code: Swift.String, shopName: Swift.String, amount: Foundation.Decimal, fee: Foundation.Decimal, feeDescription: Swift.String, currencyCode: Swift.String, countryCode: Swift.String, validationURL: Foundation.URL, paymentURL: Foundation.URL, sessionId: Swift.String)
  public static func == (a: ottu_checkout_sdk.ApplePayService, b: ottu_checkout_sdk.ApplePayService) -> Swift.Bool
}
final public class URLKnocker {
  public init(url: Foundation.URL, client: any ottu_checkout_sdk.HTTPClient)
  final public func knock()
  @objc deinit
}
public enum PaymentGateway : Swift.String {
  case knet
  case cybersource
  case checkoutcom
  case migs
  case dapi
  case burgan
  case paypal
  case mpgs
  case kpay
  case omannet
  case benefit
  case benefitPay
  case blank
  case cbk
  case fss
  case myfatoorah
  case ngenius
  case ifg
  case ccavenues
  case payUIndia
  case cod
  case amazonPay
  case ottuPg
  case bookeey
  case upg
  case bambora
  case hyperpay
  case qpay
  case smartPay
  case nbo
  case tabby
  case tamara
  case hesabe
  case rajhi
  case stcPay
  case urpay
  case beyonMoney
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Card : Swift.Equatable {
  public enum Brand : Swift.String {
    case stc
    case visa
    case mastercard
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let customerId: Swift.String
  public let brand: ottu_checkout_sdk.Card.Brand
  public let nameOnCard: Swift.String?
  public let number: Swift.String
  public let expiryMonth: Swift.String
  public let expiryYear: Swift.String
  public let token: Swift.String
  public let isPreferred: Swift.Bool
  public let isExpired: Swift.Bool
  public let pgCode: Swift.String
  public let pg: ottu_checkout_sdk.PaymentGateway
  public let cvvRequired: Swift.Bool
  public let deleteURL: Foundation.URL
  public let submitURL: Foundation.URL
  public init(customerId: Swift.String, brand: ottu_checkout_sdk.Card.Brand, nameOnCard: Swift.String?, number: Swift.String, expiryMonth: Swift.String, expiryYear: Swift.String, token: Swift.String, isPreferred: Swift.Bool, isExpired: Swift.Bool, pgCode: Swift.String, pg: ottu_checkout_sdk.PaymentGateway, cvvRequired: Swift.Bool, deleteURL: Foundation.URL, submitURL: Foundation.URL)
  public static func == (a: ottu_checkout_sdk.Card, b: ottu_checkout_sdk.Card) -> Swift.Bool
}
public enum PaymentTransactionType : Swift.String, Swift.Decodable {
  case eCommerce
  case paymentRequest
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct StcPayService : Swift.Equatable {
  public var code: Swift.String
  public var name: Swift.String
  public var pg: Swift.String
  public var amount: Foundation.Decimal
  public var currencyCode: Swift.String
  public var fee: Foundation.Decimal
  public var feeDescription: Swift.String
  public var canSaveCard: Swift.Bool
  public var submitURL: Foundation.URL
  public var paymentURL: Foundation.URL
  public init(code: Swift.String, name: Swift.String, pg: Swift.String, amount: Foundation.Decimal, currencyCode: Swift.String, fee: Foundation.Decimal, feeDescription: Swift.String, canSaveCard: Swift.Bool, submitURL: Foundation.URL, paymentURL: Foundation.URL)
  public static func == (a: ottu_checkout_sdk.StcPayService, b: ottu_checkout_sdk.StcPayService) -> Swift.Bool
}
public struct TransactionDetailsResponse : Swift.Equatable, Swift.Encodable {
  public enum Status : Swift.String, Swift.Encodable {
    case error
    case success
    case canceled
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Operation : Swift.String, Swift.Encodable {
    case purchase
    case authorize
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var status: ottu_checkout_sdk.TransactionDetailsResponse.Status?
  public var sessionId: Swift.String?
  public var message: Swift.String?
  public var orderNo: Swift.String?
  public var operation: ottu_checkout_sdk.TransactionDetailsResponse.Operation?
  public var referenceNumber: Swift.String?
  public var redirectURL: Foundation.URL?
  public var formOfPayment: Swift.String?
  public var challengeOccurred: Swift.Bool?
  public init(status: ottu_checkout_sdk.TransactionDetailsResponse.Status? = nil, sessionId: Swift.String? = nil, message: Swift.String? = nil, orderNo: Swift.String? = nil, operation: ottu_checkout_sdk.TransactionDetailsResponse.Operation? = nil, referenceNumber: Swift.String? = nil, redirectURL: Foundation.URL? = nil, formOfPayment: Swift.String? = nil, challengeOccurred: Swift.Bool? = nil, paymentGatewayInfo: Swift.String? = nil)
  public static func == (a: ottu_checkout_sdk.TransactionDetailsResponse, b: ottu_checkout_sdk.TransactionDetailsResponse) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
}
final public class TransactionDetailsFetcher {
  public enum Error : Swift.Error {
    case connectivity
    case invalidData
    case badRequest
    case authentication
    case notFound
    public static func == (a: ottu_checkout_sdk.TransactionDetailsFetcher.Error, b: ottu_checkout_sdk.TransactionDetailsFetcher.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public typealias Result = Swift.Result<(ottu_checkout_sdk.TransactionDetails, [Swift.String : Any]?), ottu_checkout_sdk.TransactionDetailsFetcher.Error>
  public init(url: Foundation.URL, client: any ottu_checkout_sdk.HTTPClient)
  final public func fetch(completion: @escaping (ottu_checkout_sdk.TransactionDetailsFetcher.Result) -> Swift.Void)
  @objc deinit
}
public enum FormOfPayment : Swift.Equatable, Swift.CaseIterable {
  case applePay
  case stcPay
  case urPay
  case tokenPay
  case ottuPG
  case redirect
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: ottu_checkout_sdk.FormOfPayment, b: ottu_checkout_sdk.FormOfPayment) -> Swift.Bool
  public typealias AllCases = [ottu_checkout_sdk.FormOfPayment]
  public static var allCases: [ottu_checkout_sdk.FormOfPayment] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public protocol PaymentCoreDelegate {
  func wasUpdated(response: (transactionDetails: ottu_checkout_sdk.TransactionDetails, jsonResponse: [Swift.String : Any]?))
  func applePayValidationSuccess(applePayService: ottu_checkout_sdk.ApplePayService)
  func needToOpenWebView(_ url: Foundation.URL)
  func needToOpenWebView(_ html: Swift.String)
  func needToCloseWebView()
  func transactionFinished()
  func errorOccured(message: Swift.String)
}
public class PaymentCore {
  @ottu_checkout_sdk.OttuObservable @_projectedValueProperty($selectedPaymentMethodTypeObservable) public var selectedPaymentMethodTypeObservable: ottu_checkout_sdk.PaymentType? {
    get
  }
  public var $selectedPaymentMethodTypeObservable: ottu_checkout_sdk.OttuObservable<ottu_checkout_sdk.PaymentType?> {
    get
  }
  public func selectPaymentMethodType(_ type: ottu_checkout_sdk.PaymentType?)
  public func deleteCard(_ type: ottu_checkout_sdk.PaymentType, completion: @escaping (Swift.Bool) -> Swift.Void)
  public init(allowedFormsOfPayments: [ottu_checkout_sdk.FormOfPayment], merchantId: Swift.String, sessionId: Swift.String, apiKey: Swift.String, delegate: any ottu_checkout_sdk.PaymentCoreDelegate)
  public func fetchTransactionDetails(firstly: Swift.Bool = false)
  public func update(with transactionDetails: (ottu_checkout_sdk.TransactionDetails, [Swift.String : Any]?), firstly: Swift.Bool)
  public func paySTC(withOTP otpCode: Swift.String)
  public func askOTPCode(phone: Swift.String, save: Swift.Bool, completion: @escaping (Swift.Result<Swift.Bool, ottu_checkout_sdk.OTPCodeRequester.Error>) -> Swift.Void)
  public func redirectPayment(_ code: Swift.String)
  public func tokenPayment(_ token: Swift.String)
  public func applePayValidation()
  public func applePaySubmit(payload: ottu_checkout_sdk.ApplePayPayload, completion: @escaping ((Swift.Bool, Swift.String, [Swift.String : Any]) -> Swift.Void))
  @objc deinit
}
final public class TokenPaySubmitter {
  public typealias Result = Swift.Result<ottu_checkout_sdk.TokenPaySubmitter.Response, ottu_checkout_sdk.TokenPaySubmitter.Error>
  public struct Response : Swift.Equatable {
    public enum Status : Swift.String, Swift.Equatable {
      case success
      case canceled
      case error
      case threeDS
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public let status: ottu_checkout_sdk.TokenPaySubmitter.Response.Status
    public let message: Swift.String?
    public let sessionId: Swift.String?
    public let redirectURL: Foundation.URL?
    public let html: Swift.String?
    public let referenceNumber: Swift.String?
    public let wsURL: Foundation.URL?
    public init(status: ottu_checkout_sdk.TokenPaySubmitter.Response.Status, message: Swift.String?, sessionId: Swift.String?, redirectURL: Foundation.URL?, html: Swift.String?, referenceNumber: Swift.String?, wsURL: Foundation.URL?)
    public static func == (a: ottu_checkout_sdk.TokenPaySubmitter.Response, b: ottu_checkout_sdk.TokenPaySubmitter.Response) -> Swift.Bool
  }
  public enum Error : Swift.Error {
    case connectivity
    case invalidData
    case badRequest(Any)
    case authentication(Swift.String)
    case notFound(Swift.String)
  }
  public init(client: any ottu_checkout_sdk.HTTPClient)
  final public func submit(payload: [Swift.String : Swift.String], to url: Foundation.URL, completion: @escaping (ottu_checkout_sdk.TokenPaySubmitter.Result) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class TokenPaySubmitterMapper {
  public struct Response : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
  @objc deinit
}
final public class RedirectURLRequester {
  public typealias Result = Swift.Result<ottu_checkout_sdk.RedirectURLRequester.Response, ottu_checkout_sdk.RedirectURLRequester.Error>
  public enum Error : Swift.Error {
    case connectivity
    case invalidData
    case badRequest([Swift.String : Swift.Array<Swift.String>])
    case authentication(Swift.String)
    case notFound(Swift.String)
  }
  public struct Response : Swift.Equatable {
    public enum Status : Swift.String, Swift.Equatable {
      case success
      case canceled
      case error
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public let status: ottu_checkout_sdk.RedirectURLRequester.Response.Status
    public let message: Swift.String
    public let redirectURL: Foundation.URL?
    public init(status: ottu_checkout_sdk.RedirectURLRequester.Response.Status, message: Swift.String, redirectURL: Foundation.URL?)
    public static func == (a: ottu_checkout_sdk.RedirectURLRequester.Response, b: ottu_checkout_sdk.RedirectURLRequester.Response) -> Swift.Bool
  }
  public struct Request {
    public init(pgCode: Swift.String)
  }
  public init(client: any ottu_checkout_sdk.HTTPClient)
  final public func submit(code: Swift.String, to url: Foundation.URL, completion: @escaping (ottu_checkout_sdk.RedirectURLRequester.Result) -> Swift.Void)
  @objc deinit
}
final public class CardDeleter {
  public typealias Result = Swift.Result<Swift.Bool, ottu_checkout_sdk.CardDeleter.Error>
  public enum Error : Swift.Error {
    case connectivity
    case invalidData
    case badRequest
    case authentication
    case notFound
    public static func == (a: ottu_checkout_sdk.CardDeleter.Error, b: ottu_checkout_sdk.CardDeleter.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(client: any ottu_checkout_sdk.HTTPClient)
  final public func delete(with url: Foundation.URL, completion: @escaping (ottu_checkout_sdk.CardDeleter.Result) -> Swift.Void)
  @objc deinit
}
final public class ApplePaySessionValidator {
  public typealias Result = Swift.Result<Swift.Bool, ottu_checkout_sdk.ApplePaySessionValidator.Error>
  public enum Error : Swift.Error {
    case connectivity
    case invalidData
    case badRequest(Swift.String)
    case authentication(Swift.String)
    case notFound(Swift.String)
  }
  public struct Request {
    public typealias JSONDictionary = [Swift.String : Any]
    public init(sessionId: Swift.String, code: Swift.String)
  }
  public init(client: any ottu_checkout_sdk.HTTPClient)
  final public func submit(sessionId: Swift.String, code: Swift.String, to url: Foundation.URL, completion: @escaping (ottu_checkout_sdk.ApplePaySessionValidator.Result) -> Swift.Void)
  @objc deinit
}
extension Foundation.Locale {
  public func languageDirectionFromLeftToRight() -> Swift.Bool
}
public enum CurrencyHelper {
  public static func formatCurrency(value: Foundation.Decimal, currencyCode: Swift.String?) -> Swift.String?
  public static func addPlusSign(_ value: Swift.String) -> Swift.String
}
@_hasMissingDesignatedInitializers final public class ApplePaySessionValidatorMapper {
  @objc deinit
}
public struct ApplePayPayload {
  public let paymentData: ottu_checkout_sdk.ApplePayPayload.PaymentData
  public let paymentMethod: ottu_checkout_sdk.ApplePayPayload.PaymentMethod
  public let transactionIdentifier: Swift.String
  public init(paymentData: ottu_checkout_sdk.ApplePayPayload.PaymentData, paymentMethod: ottu_checkout_sdk.ApplePayPayload.PaymentMethod, transactionIdentifier: Swift.String)
  public struct PaymentData : Swift.Decodable {
    public struct PaymentDataHeader : Swift.Decodable {
      public let ephemeralPublicKey: Swift.String
      public let publicKeyHash: Swift.String
      public let transactionId: Swift.String
      public init(ephemeralPublicKey: Swift.String, publicKeyHash: Swift.String, transactionId: Swift.String)
      public init(from decoder: any Swift.Decoder) throws
    }
    public let version: Swift.String
    public let data: Swift.String
    public let signature: Swift.String
    public let header: ottu_checkout_sdk.ApplePayPayload.PaymentData.PaymentDataHeader
    public init(version: Swift.String, data: Swift.String, signature: Swift.String, header: ottu_checkout_sdk.ApplePayPayload.PaymentData.PaymentDataHeader)
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct PaymentMethod {
    public let displayName: Swift.String
    public let network: Swift.String
    public let type: Swift.UInt
    public init(displayName: Swift.String, network: Swift.String, type: Swift.UInt)
  }
}
final public class ApplePaySubmiter {
  public typealias Result = Swift.Result<ottu_checkout_sdk.ApplePaySubmiter.Response, ottu_checkout_sdk.ApplePaySubmiter.Error>
  public struct Response {
    public let approved: Swift.Bool
    public let message: Swift.String
    public let callbackPayload: [Swift.String : Any]
  }
  public enum Error : Swift.Error {
    case connectivity
    case invalidData
    case badRequest(Swift.String)
    case authentication(Swift.String)
    case notFound(Swift.String)
  }
  public struct Request {
    public typealias JSONDictionary = [Swift.String : Any]
    public init(sessionId: Swift.String, currency: Swift.String, amount: Swift.String, code: Swift.String, applePayload: ottu_checkout_sdk.ApplePayPayload)
  }
  public init(client: any ottu_checkout_sdk.HTTPClient)
  final public func submit(sessionId: Swift.String, currency: Swift.String, amount: Swift.String, code: Swift.String, applePayload: ottu_checkout_sdk.ApplePayPayload, to url: Foundation.URL, completion: @escaping (ottu_checkout_sdk.ApplePaySubmiter.Result) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class ApplePaySubmiterMapper {
  public struct ErrorResponse : Swift.Decodable {
    public let message: Swift.String?
    public let detail: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  @objc deinit
}
@propertyWrapper public class OttuObservable<Value> {
  public typealias Observer = (Value) -> Swift.Void
  public var wrappedValue: Value {
    get
    set
  }
  public var projectedValue: ottu_checkout_sdk.OttuObservable<Value> {
    get
  }
  public init(wrappedValue: Value)
  public func subscribe(_ observer: @escaping ottu_checkout_sdk.OttuObservable<Value>.Observer) -> ottu_checkout_sdk.Disposable
  @objc deinit
}
public class Disposable {
  final public let dispose: () -> Swift.Void
  public init(_ dispose: @escaping () -> Swift.Void)
  @objc deinit
}
public struct PaymentModel {
}
public class PaymentCalculation {
  public init()
  public func updateTransactionDetails(_ transactionDetails: ottu_checkout_sdk.TransactionDetails?)
  @objc deinit
}
public protocol PaymentMethodProtocol {
  func card(withToken token: Swift.String) -> ottu_checkout_sdk.Card?
  func applePayService() -> ottu_checkout_sdk.ApplePayService?
  func stcPayService() -> ottu_checkout_sdk.StcPayService?
  func method(withCode code: Swift.String) -> ottu_checkout_sdk.PaymentMethod?
}
extension ottu_checkout_sdk.PaymentCore : ottu_checkout_sdk.PaymentMethodProtocol {
  public func card(withToken token: Swift.String) -> ottu_checkout_sdk.Card?
  public func applePayService() -> ottu_checkout_sdk.ApplePayService?
  public func stcPayService() -> ottu_checkout_sdk.StcPayService?
  public func method(withCode code: Swift.String) -> ottu_checkout_sdk.PaymentMethod?
}
public protocol OttuDelegate {
  func errorCallback(_ data: [Swift.String : Any]?)
  func cancelCallback(_ data: [Swift.String : Any]?)
  func successCallback(_ data: [Swift.String : Any]?)
}
public class ButtonComponent {
  public var enabledTitleColor: UIKit.UIColor
  public var disabledTitleColor: UIKit.UIColor
  public var fontFamily: Swift.String {
    get
    set
  }
  public var enabledBackgroundColor: UIKit.UIColor
  public var disabledBackgroundColor: UIKit.UIColor
  public init()
  @objc deinit
}
final public class Checkout {
  public init(formsOfPayments: [ottu_checkout_sdk.FormOfPayment] = FormOfPayment.allCases, theme: ottu_checkout_sdk.CheckoutTheme = CheckoutTheme(), sessionId: Swift.String, merchantId: Swift.String, apiKey: Swift.String, setupPreload: ottu_checkout_sdk.TransactionDetails? = nil, delegate: any ottu_checkout_sdk.OttuDelegate)
  final public func paymentViewController() -> UIKit.UIViewController?
  @objc deinit
}
extension ottu_checkout_sdk.Checkout : ottu_checkout_sdk.PaymentCoreDelegate {
  final public func applePayValidationSuccess(applePayService: ottu_checkout_sdk.ApplePayService)
  final public func transactionFinished()
  final public func errorOccured(message: Swift.String)
  final public func wasUpdated(response: (transactionDetails: ottu_checkout_sdk.TransactionDetails, jsonResponse: [Swift.String : Any]?))
  final public func needToOpenWebView(_ url: Foundation.URL)
  final public func needToOpenWebView(_ html: Swift.String)
  final public func needToCloseWebView()
}
public enum BottomSheetDetents {
  case medium
  case large
  public static func == (a: ottu_checkout_sdk.BottomSheetDetents, b: ottu_checkout_sdk.BottomSheetDetents) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct BottomSheetConfiguration {
  public let showPullBar: Swift.Bool
  public let tapToDismissEnabled: Swift.Bool
  public let panToDismissEnaled: Swift.Bool
  public let cornerRadius: CoreFoundation.CGFloat
  public let overlayColor: UIKit.UIColor
  public let detents: ottu_checkout_sdk.BottomSheetDetents
  public let animationDuration: Foundation.TimeInterval
  public let dampingRatio: Swift.Double
  public let dismissThreshold: CoreFoundation.CGFloat
  public init(showPullBar: Swift.Bool, tapToDismissEnabled: Swift.Bool, panToDismissEnaled: Swift.Bool, cornerRadius: CoreFoundation.CGFloat, overlayColor: UIKit.UIColor, animationDuration: Foundation.TimeInterval, dampingRatio: Swift.Double, dismissThreshold: CoreFoundation.CGFloat, detents: ottu_checkout_sdk.BottomSheetDetents)
  public static let `default`: ottu_checkout_sdk.BottomSheetConfiguration
}
public struct OTPErrorViewModel {
  public let errorMessage: Swift.String
}
public struct ResendOTPTimerViewModel {
  public let timeLeft: Swift.Int
  public let resendBoxInfo: Swift.String
  public let resendBoxButtonTitle: Swift.String
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class GlobalOTPCountdown : ObjectiveC.NSObject {
  public static let shared: ottu_checkout_sdk.GlobalOTPCountdown
  public var uuid: Swift.String? {
    get
  }
  public var secondsLeft: Swift.Int {
    get
  }
  public func start(seconds: Swift.Int, uuid: Swift.String, job: @escaping ((Swift.Int) -> Swift.Void))
  public func invalidate()
  @objc deinit
}
public protocol OTPCodeView {
  func display(viewModel: ottu_checkout_sdk.OTPCodeViewModel)
}
public protocol ResendOTPTimerView {
  func display(viewModel: ottu_checkout_sdk.ResendOTPTimerViewModel)
}
public protocol RequestOTPErrorView {
  func displayRequestOTPError(viewModel: ottu_checkout_sdk.OTPErrorViewModel)
}
final public class OTPCodePresenter {
  public init(view: any ottu_checkout_sdk.OTPCodeView, resendOTPView: any ottu_checkout_sdk.ResendOTPTimerView, requestOTPErrorView: any ottu_checkout_sdk.RequestOTPErrorView, phone: Swift.String, save: Swift.Bool, core: ottu_checkout_sdk.PaymentCore)
  final public func requestOTPCode()
  @objc deinit
}
public struct OTPCodeViewModel {
  public let screenTitle: Swift.String
  public let screenMessage: Swift.String
  public let confirmButtonTitle: Swift.String
}
@_hasMissingDesignatedInitializers final public class STCPayMapper {
  public struct Response : Swift.Decodable {
    public init(from decoder: any Swift.Decoder) throws
  }
  @objc deinit
}
final public class STCPaySubmitter {
  public typealias Result = Swift.Result<ottu_checkout_sdk.STCPaySubmitter.Response, ottu_checkout_sdk.STCPaySubmitter.Error>
  public struct Response : Swift.Equatable {
    public enum Status : Swift.String, Swift.Equatable {
      case success
      case canceled
      case error
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public let status: ottu_checkout_sdk.STCPaySubmitter.Response.Status
    public let message: Swift.String?
    public let sessionId: Swift.String?
    public init(status: ottu_checkout_sdk.STCPaySubmitter.Response.Status, message: Swift.String?, sessionId: Swift.String?)
    public static func == (a: ottu_checkout_sdk.STCPaySubmitter.Response, b: ottu_checkout_sdk.STCPaySubmitter.Response) -> Swift.Bool
  }
  public enum Error : Swift.Error {
    case connectivity
    case invalidData
    case badRequest(Swift.String?)
    case authentication(Swift.String)
    case notFound(Swift.String?)
  }
  public struct Request {
  }
  public init(client: any ottu_checkout_sdk.HTTPClient)
  final public func submit(payload: [Swift.String : Swift.String], to url: Foundation.URL, completion: @escaping (ottu_checkout_sdk.STCPaySubmitter.Result) -> Swift.Void)
  @objc deinit
}
public protocol ImageDataLoader : AnyObject {
  typealias Result = Swift.Result<Foundation.Data, any Swift.Error>
  func loadImageData(from url: Foundation.URL, completion: @escaping (Swift.Result<Foundation.Data, any Swift.Error>) -> Swift.Void) -> any ottu_checkout_sdk.ImageDataLoaderTask
}
public protocol ImageDataLoaderTask : AnyObject {
  func cancel()
}
public class RemoteImageDataLoader : ottu_checkout_sdk.ImageDataLoader {
  public init(client: any ottu_checkout_sdk.HTTPClient)
  public enum Error : Swift.Error {
    case connectivity
    case invalidData
    public static func == (a: ottu_checkout_sdk.RemoteImageDataLoader.Error, b: ottu_checkout_sdk.RemoteImageDataLoader.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public func loadImageData(from url: Foundation.URL, completion: @escaping (Swift.Result<Foundation.Data, any Swift.Error>) -> Swift.Void) -> any ottu_checkout_sdk.ImageDataLoaderTask
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class OTPCodeMapper {
  public struct Response : Swift.Decodable {
    public let message: Swift.String
    public init(from decoder: any Swift.Decoder) throws
  }
  @objc deinit
}
final public class OTPCodeRequester {
  public typealias Result = Swift.Result<Swift.String, ottu_checkout_sdk.OTPCodeRequester.Error>
  public enum Error : Swift.Error {
    case connectivity
    case invalidData
    case badRequest(Swift.String)
    case authentication(Swift.String)
    case notFound(Swift.String)
  }
  public struct Request {
    public init(pgCode: Swift.String, sessionId: Swift.String, phone: Swift.String, save: Swift.Bool)
  }
  public init(client: any ottu_checkout_sdk.HTTPClient)
  final public func submit(request: ottu_checkout_sdk.OTPCodeRequester.Request, to url: Foundation.URL, completion: @escaping (ottu_checkout_sdk.OTPCodeRequester.Result) -> Swift.Void)
  @objc deinit
}
public class LabelComponent {
  public var color: UIKit.UIColor
  public var fontFamily: Swift.String {
    get
    set
  }
  public init()
  @objc deinit
}
public struct PaymentViewModel {
  public var selectPaymentMethodIsHidden: Swift.Bool
  public var cvvCodeIsHidden: Swift.Bool
  public var payButtonIsHidden: Swift.Bool
}
public protocol LocalImagesContainer {
  associatedtype Image
  func cardIcon(forBrand brand: ottu_checkout_sdk.Card.Brand) -> Self.Image
  func applePayServiceIcon() -> Self.Image
  func stcPayServiceIcon() -> Self.Image
  func urPayServiceIcon() -> Self.Image
  func methodIcon(forFlow flow: ottu_checkout_sdk.PaymentMethod.Flow) -> Self.Image
}
public protocol PaymentIconLoader {
  associatedtype Image
  func icon(for paymentType: ottu_checkout_sdk.PaymentType, handler: @escaping (Self.Image?) -> Swift.Void)
}
public class PaymentIconLoaderAdapter<Image> : ottu_checkout_sdk.PaymentIconLoader {
  public init(imageDataLoader: any ottu_checkout_sdk.ImageDataLoader, localImagesContainer: any ottu_checkout_sdk.LocalImagesContainer, imageTransformer: @escaping (Foundation.Data) -> Image?, paymentMethod: any ottu_checkout_sdk.PaymentMethodProtocol)
  public func icon(for paymentType: ottu_checkout_sdk.PaymentType, handler: @escaping (Image?) -> Swift.Void)
  public func cancelLoadingIcon()
  @objc deinit
}
public protocol PaymentDetailsView : AnyObject {
  func display(viewModel: ottu_checkout_sdk.PaymentDetailsViewModel)
}
final public class PaymentDetailsPresenter {
  public init(view: any ottu_checkout_sdk.PaymentDetailsView, core: ottu_checkout_sdk.PaymentCore)
  @objc deinit
}
public protocol CVVCodeView : AnyObject {
  func display(viewModel: ottu_checkout_sdk.CVVCodeViewModel)
}
final public class CVVCodePresenter {
  public init(view: any ottu_checkout_sdk.CVVCodeView, core: ottu_checkout_sdk.PaymentCore)
  @objc deinit
  final public func didEnterCVVCode(_ cvv: Swift.String?)
}
public struct CVVCodeViewModel {
  public let placeholder: Swift.String
  public let cvv: Swift.String
}
public protocol LoadingView : AnyObject {
  func display(viewModel: ottu_checkout_sdk.LoadingViewModel)
}
public protocol PhoneNumberView {
  func display(viewModel: ottu_checkout_sdk.PhoneNumberViewModel)
  func displayOTPCodeView()
}
final public class PhoneNumberPresenter {
  public init(view: any ottu_checkout_sdk.PhoneNumberView, requestOTPErrorView: any ottu_checkout_sdk.RequestOTPErrorView, core: ottu_checkout_sdk.PaymentCore)
  final public func didTouchRequestOTP(phoneNumber: Swift.String, save: Swift.Bool)
  final public func requestOTPCode(phone: Swift.String, save: Swift.Bool)
  @objc deinit
}
public struct PhoneNumberViewModel {
  public let screenTitle: Swift.String
  public let screenMessage: Swift.String
  public let phoneNumberTitle: Swift.String
  public let phoneNumberValue: Swift.String?
  public let sendOTPButtonTitle: Swift.String
  public let isPossibleSaveCard: Swift.Bool
}
public protocol SaveForFutureUseView {
  func display(viewModel: ottu_checkout_sdk.SaveForFutureUseViewModel)
}
final public class SaveForFutureUsePresenter {
  public init(view: any ottu_checkout_sdk.SaveForFutureUseView)
  @objc deinit
}
public struct SaveForFutureUseViewModel {
  public let title: Swift.String
  public let message: Swift.String
}
public protocol PayButtonView : AnyObject {
  func display(viewModel: ottu_checkout_sdk.PayButtonViewModel)
}
public class PayButtonPresenter {
  public init(view: any ottu_checkout_sdk.PayButtonView, core: ottu_checkout_sdk.PaymentCore)
  @objc deinit
}
public struct SelectPaymentMethodViewModel<Image> {
  public let icon: Image?
  public let title: Swift.String
  public let subTitle: Swift.String?
  public let changeTitle: Swift.String
  public let isEnabled: Swift.Bool
}
public protocol PaymentView : AnyObject {
  func display(viewModel: ottu_checkout_sdk.PaymentViewModel)
}
public class PaymentPresenter {
  public init(view: any ottu_checkout_sdk.PaymentView, core: ottu_checkout_sdk.PaymentCore)
  @objc deinit
}
extension ottu_checkout_sdk.PaymentPresenter {
  public var selectPaymentSectionTitle: Swift.String {
    get
  }
  public var paymentDetailsSectionTitle: Swift.String {
    get
  }
}
public enum PaymentType : Swift.Equatable {
  case applePay
  case stcPay
  case tokenPay(token: Swift.String)
  case method(code: Swift.String)
  public static func == (a: ottu_checkout_sdk.PaymentType, b: ottu_checkout_sdk.PaymentType) -> Swift.Bool
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol SelectPaymentMethodView<Image> : AnyObject {
  associatedtype Image
  func display(viewModel: ottu_checkout_sdk.SelectPaymentMethodViewModel<Self.Image>?)
}
#else
public protocol SelectPaymentMethodView : AnyObject {
  associatedtype Image
  func display(viewModel: ottu_checkout_sdk.SelectPaymentMethodViewModel<Self.Image>?)
}
#endif
public class SelectPaymentMethodPresenter<Image, IconFactory> where Image == IconFactory.Image, IconFactory : ottu_checkout_sdk.PaymentIconLoader {
  public init(view: any ottu_checkout_sdk.SelectPaymentMethodView<Image>, iconFactory: IconFactory, core: ottu_checkout_sdk.PaymentCore)
  @objc deinit
}
public struct PayButtonViewModel {
  public enum PayButtonType {
    public enum Brand {
      case apple
      case stc
      case urpay
      public static func == (a: ottu_checkout_sdk.PayButtonViewModel.PayButtonType.Brand, b: ottu_checkout_sdk.PayButtonViewModel.PayButtonType.Brand) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    case normal(title: Swift.String)
    case branded(_: ottu_checkout_sdk.PayButtonViewModel.PayButtonType.Brand)
  }
  public let isEnabled: Swift.Bool
  public let type: ottu_checkout_sdk.PayButtonViewModel.PayButtonType
}
public struct LoadingViewModel {
  public let isLoading: Swift.Bool
}
public struct PaymentDetailsViewModel {
  public let amountTitle: Swift.String
  public let amountValue: Swift.String
  public let feeTitle: Swift.String
  public let feeValue: Swift.String?
  public let totalTitle: Swift.String
  public let totalValue: Swift.String
}
public struct MessageViewModel {
  public let isHidden: Swift.Bool
  public let message: Swift.String
}
public class TextFieldComponent {
  public var label: ottu_checkout_sdk.LabelComponent
  public var text: ottu_checkout_sdk.LabelComponent
  public var backgroundColor: UIKit.UIColor
  public init()
  @objc deinit
}
public struct RemoteCard : Swift.Decodable {
  public let customer_id: Swift.String
  public let brand: Swift.String
  public let name_on_card: Swift.String?
  public let number: Swift.String
  public let expiry_month: Swift.String
  public let expiry_year: Swift.String
  public let token: Swift.String
  public let is_preferred: Swift.Bool
  public let is_expired: Swift.Bool
  public let pg_code: Swift.String
  public let pg: Swift.String
  public let cvv_required: Swift.Bool
  public let delete_url: Foundation.URL
  public let submit_url: Foundation.URL
  #if compiler(>=5.3) && $EffectfulProp
  public var card: ottu_checkout_sdk.Card {
    get throws
  }
  #endif
  public init(from decoder: any Swift.Decoder) throws
}
public protocol ListPaymentMethodsView : AnyObject {
  func display(_ viewModel: ottu_checkout_sdk.ListPaymentCellsViewModel)
}
final public class ListPaymentMethodsPresenter {
  public init(listView: any ottu_checkout_sdk.ListPaymentMethodsView, core: ottu_checkout_sdk.PaymentCore)
  @objc deinit
  final public func didSelectItem(_ index: Swift.Int)
  final public func didDeleteItem(_ index: Swift.Int)
}
public struct ListPaymentCellViewModel {
  public let type: ottu_checkout_sdk.PaymentType
  public var isDeletable: Swift.Bool
  public var icon: Foundation.URL?
  public let title: Swift.String
  public var subTitle: Swift.String?
  public var fee: Swift.String?
  public var feeDescription: Swift.String?
  public var cardNumber: Swift.String?
}
public struct ListPaymentCellsViewModel {
  public let payments: [ottu_checkout_sdk.ListPaymentCellViewModel]
}
public struct RemotePaymentMethod : Swift.Decodable {
  public let code: Swift.String
  public let name: Swift.String
  public let pg: Swift.String
  public let type: Swift.String
  public let amount: Swift.String
  public let currency_code: Swift.String
  public let fee: Swift.String
  public let fee_description: Swift.String?
  public let icon: Foundation.URL
  public let flow: Swift.String
  public let redirect_url: Foundation.URL?
  public let can_save_card: Swift.Bool
  public let submit_url: Foundation.URL?
  #if compiler(>=5.3) && $EffectfulProp
  public var paymentMethod: ottu_checkout_sdk.PaymentMethod {
    get throws
  }
  #endif
  public init(from decoder: any Swift.Decoder) throws
}
public struct RemotePaymentService : Swift.Decodable {
  public let code: Swift.String
  public let name: Swift.String?
  public let pg: Swift.String?
  public let type: Swift.String?
  public let amount: Swift.String?
  public let currency_code: Swift.String
  public let fee: Swift.String
  public let fee_description: Swift.String
  public let icon: Foundation.URL?
  public let flow: Swift.String
  public let redirect_url: Foundation.URL?
  public let can_save_card: Swift.Bool?
  public let merchant_id: Swift.String?
  public let country_code: Swift.String?
  public let domain: Swift.String?
  public let shop_name: Swift.String?
  public let validation_url: Foundation.URL?
  public let session_id: Swift.String?
  public let environment: Swift.String?
  public let gateway: Swift.String?
  public let gateway_merchant_id: Swift.String?
  public let merchant_name: Swift.String?
  public let total_price: Swift.String?
  public let submit_url: Foundation.URL?
  public let payment_url: Foundation.URL
  #if compiler(>=5.3) && $EffectfulProp
  public var applePayService: ottu_checkout_sdk.ApplePayService? {
    get throws
  }
  #endif
  public init(from decoder: any Swift.Decoder) throws
}
public struct RemoteResponse : Swift.Decodable {
  public let status: Swift.String?
  public let session_id: Swift.String?
  public let message: Swift.String?
  public let order_no: Swift.String?
  public let operation: Swift.String?
  public let reference_number: Swift.String?
  public let redirect_url: Foundation.URL?
  public let form_of_payment: Swift.String?
  public let challenge_occurred: Swift.Bool?
  #if compiler(>=5.3) && $EffectfulProp
  public var response: ottu_checkout_sdk.TransactionDetailsResponse {
    get throws
  }
  #endif
  public init(from decoder: any Swift.Decoder) throws
}
public struct RemoteTransactionDetails : Swift.Decodable {
  public let amount: Swift.String
  public let cards: [ottu_checkout_sdk.RemoteCard]
  public let customer_id: Swift.String?
  public let customer_phone: Swift.String?
  public let currency_code: Swift.String
  public let language: Swift.String
  public let operation: Swift.String
  public let payment_methods: [ottu_checkout_sdk.RemotePaymentMethod]
  public let payment_services: [ottu_checkout_sdk.RemotePaymentService]
  public let response: ottu_checkout_sdk.RemoteResponse
  public let state: Swift.String
  public let type: Swift.String
  public let is_amount_editable: Swift.Bool
  public let session_id: Swift.String
  #if compiler(>=5.3) && $EffectfulProp
  public var transactionDetails: ottu_checkout_sdk.TransactionDetails {
    get throws
  }
  #endif
  public init(from decoder: any Swift.Decoder) throws
}
extension Foundation.HTTPURLResponse {
  public var isOK: Swift.Bool {
    get
  }
  public var isOkNoContent: Swift.Bool {
    get
  }
  public var isBadRequest: Swift.Bool {
    get
  }
  public var isAuthenticationError: Swift.Bool {
    get
  }
  public var isForbidden: Swift.Bool {
    get
  }
  public var isNotFound: Swift.Bool {
    get
  }
  public var isUnsupportedMediaType: Swift.Bool {
    get
  }
}
public enum HTTPMethod : Swift.String {
  case get
  case post
  case delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol HTTPClientTask {
  func cancel()
}
public protocol HTTPClient {
  typealias Result = Swift.Result<(Foundation.Data, Foundation.HTTPURLResponse), any Swift.Error>
  @discardableResult
  func request(method: ottu_checkout_sdk.HTTPMethod, with url: Foundation.URL, completion: @escaping (Self.Result) -> Swift.Void) -> any ottu_checkout_sdk.HTTPClientTask
  @discardableResult
  func request(method: ottu_checkout_sdk.HTTPMethod, with url: Foundation.URL, payload: [Swift.String : Any]?, completion: @escaping (Self.Result) -> Swift.Void) -> any ottu_checkout_sdk.HTTPClientTask
}
final public class URLSessionHTTPClient : ottu_checkout_sdk.HTTPClient {
  public init(session: Foundation.URLSession, apiKey: Swift.String? = nil)
  final public func request(method httpMethod: ottu_checkout_sdk.HTTPMethod, with url: Foundation.URL, completion: @escaping (Swift.Result<(Foundation.Data, Foundation.HTTPURLResponse), any Swift.Error>) -> Swift.Void) -> any ottu_checkout_sdk.HTTPClientTask
  final public func request(method httpMethod: ottu_checkout_sdk.HTTPMethod, with url: Foundation.URL, payload: [Swift.String : Any]? = nil, completion: @escaping (Swift.Result<(Foundation.Data, Foundation.HTTPURLResponse), any Swift.Error>) -> Swift.Void) -> any ottu_checkout_sdk.HTTPClientTask
  @objc deinit
}
@objc final public class BottomSheetTransitioningDelegate : ObjectiveC.NSObject {
  public init(configuration: ottu_checkout_sdk.BottomSheetConfiguration)
  @objc deinit
}
extension ottu_checkout_sdk.BottomSheetTransitioningDelegate : UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
  @_Concurrency.MainActor(unsafe) @objc final public func animationController(forDismissed dismissed: UIKit.UIViewController) -> (any UIKit.UIViewControllerAnimatedTransitioning)?
  @_Concurrency.MainActor(unsafe) @objc final public func interactionControllerForDismissal(using animator: any UIKit.UIViewControllerAnimatedTransitioning) -> (any UIKit.UIViewControllerInteractiveTransitioning)?
  @_Concurrency.MainActor(unsafe) @objc final public func presentationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController?, source: UIKit.UIViewController) -> UIKit.UIPresentationController?
}
public class CheckoutTheme {
  public var backgroundColor: UIKit.UIColor
  public var backgroundColorModal: UIKit.UIColor
  public var margins: UIKit.UIEdgeInsets
  public var mainTitle: ottu_checkout_sdk.LabelComponent
  public var title: ottu_checkout_sdk.LabelComponent
  public var subtitle: ottu_checkout_sdk.LabelComponent
  public var button: ottu_checkout_sdk.ButtonComponent
  public var selectorButton: ottu_checkout_sdk.ButtonComponent
  public var iconColor: UIKit.UIColor
  public var inputTextField: ottu_checkout_sdk.TextFieldComponent
  public var switchOnTintColor: UIKit.UIColor
  public var errorMessage: ottu_checkout_sdk.LabelComponent
  public var feesTitle: ottu_checkout_sdk.LabelComponent
  public var feesSubtitle: ottu_checkout_sdk.LabelComponent
  public var dataLabel: ottu_checkout_sdk.LabelComponent
  public var dataValue: ottu_checkout_sdk.LabelComponent
  public var showPaymentDetails: Swift.Bool
  public init()
  @objc deinit
}
extension ottu_checkout_sdk.SentryConfigFetcher.Error : Swift.Equatable {}
extension ottu_checkout_sdk.SentryConfigFetcher.Error : Swift.Hashable {}
extension ottu_checkout_sdk.PaymentModeType : Swift.Equatable {}
extension ottu_checkout_sdk.PaymentModeType : Swift.Hashable {}
extension ottu_checkout_sdk.PaymentModeType : Swift.RawRepresentable {}
extension ottu_checkout_sdk.TransactionDetails.Language : Swift.Equatable {}
extension ottu_checkout_sdk.TransactionDetails.Language : Swift.Hashable {}
extension ottu_checkout_sdk.TransactionDetails.Language : Swift.RawRepresentable {}
extension ottu_checkout_sdk.TransactionDetails.State : Swift.Equatable {}
extension ottu_checkout_sdk.TransactionDetails.State : Swift.Hashable {}
extension ottu_checkout_sdk.TransactionDetails.State : Swift.RawRepresentable {}
extension ottu_checkout_sdk.PaymentMethod.Flow : Swift.Equatable {}
extension ottu_checkout_sdk.PaymentMethod.Flow : Swift.Hashable {}
extension ottu_checkout_sdk.PaymentMethod.Flow : Swift.RawRepresentable {}
extension ottu_checkout_sdk.PaymentGateway : Swift.Equatable {}
extension ottu_checkout_sdk.PaymentGateway : Swift.Hashable {}
extension ottu_checkout_sdk.PaymentGateway : Swift.RawRepresentable {}
extension ottu_checkout_sdk.Card.Brand : Swift.Equatable {}
extension ottu_checkout_sdk.Card.Brand : Swift.Hashable {}
extension ottu_checkout_sdk.Card.Brand : Swift.RawRepresentable {}
extension ottu_checkout_sdk.PaymentTransactionType : Swift.Equatable {}
extension ottu_checkout_sdk.PaymentTransactionType : Swift.Hashable {}
extension ottu_checkout_sdk.PaymentTransactionType : Swift.RawRepresentable {}
extension ottu_checkout_sdk.TransactionDetailsResponse.Status : Swift.Equatable {}
extension ottu_checkout_sdk.TransactionDetailsResponse.Status : Swift.Hashable {}
extension ottu_checkout_sdk.TransactionDetailsResponse.Status : Swift.RawRepresentable {}
extension ottu_checkout_sdk.TransactionDetailsResponse.Operation : Swift.Equatable {}
extension ottu_checkout_sdk.TransactionDetailsResponse.Operation : Swift.Hashable {}
extension ottu_checkout_sdk.TransactionDetailsResponse.Operation : Swift.RawRepresentable {}
extension ottu_checkout_sdk.TransactionDetailsFetcher.Error : Swift.Equatable {}
extension ottu_checkout_sdk.TransactionDetailsFetcher.Error : Swift.Hashable {}
extension ottu_checkout_sdk.FormOfPayment : Swift.Hashable {}
extension ottu_checkout_sdk.TokenPaySubmitter.Response.Status : Swift.Hashable {}
extension ottu_checkout_sdk.TokenPaySubmitter.Response.Status : Swift.RawRepresentable {}
extension ottu_checkout_sdk.RedirectURLRequester.Response.Status : Swift.Hashable {}
extension ottu_checkout_sdk.RedirectURLRequester.Response.Status : Swift.RawRepresentable {}
extension ottu_checkout_sdk.CardDeleter.Error : Swift.Equatable {}
extension ottu_checkout_sdk.CardDeleter.Error : Swift.Hashable {}
extension ottu_checkout_sdk.BottomSheetDetents : Swift.Equatable {}
extension ottu_checkout_sdk.BottomSheetDetents : Swift.Hashable {}
extension ottu_checkout_sdk.STCPaySubmitter.Response.Status : Swift.Hashable {}
extension ottu_checkout_sdk.STCPaySubmitter.Response.Status : Swift.RawRepresentable {}
extension ottu_checkout_sdk.RemoteImageDataLoader.Error : Swift.Equatable {}
extension ottu_checkout_sdk.RemoteImageDataLoader.Error : Swift.Hashable {}
extension ottu_checkout_sdk.PayButtonViewModel.PayButtonType.Brand : Swift.Equatable {}
extension ottu_checkout_sdk.PayButtonViewModel.PayButtonType.Brand : Swift.Hashable {}
extension ottu_checkout_sdk.HTTPMethod : Swift.Equatable {}
extension ottu_checkout_sdk.HTTPMethod : Swift.Hashable {}
extension ottu_checkout_sdk.HTTPMethod : Swift.RawRepresentable {}
