// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Sentry
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import CoreGraphics
import Foundation
import MetricKit
import ObjectiveC.NSObjCRuntime
import ObjectiveC
@_exported import Sentry
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class SentryRedactViewHelper : ObjectiveC.NSObject {
  @objc public static func clipOutView(_ view: UIKit.UIView)
  @objc public static func maskSwiftUI(_ view: UIKit.UIView)
  @objc deinit
}
@objc public enum SentryTransactionNameSource : Swift.Int {
  @objc(kSentryTransactionNameSourceCustom) case custom = 0
  @objc(kSentryTransactionNameSourceUrl) case url
  @objc(kSentryTransactionNameSourceRoute) case route
  @objc(kSentryTransactionNameSourceView) case view
  @objc(kSentryTransactionNameSourceComponent) case component
  @objc(kSentryTransactionNameSourceTask) case sourceTask
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SentryExperimentalOptions : ObjectiveC.NSObject {
  @objc public var sessionReplay: Sentry.SentryReplayOptions
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SentryReplayOptions : ObjectiveC.NSObject {
  @objc public enum SentryReplayQuality : Swift.Int, Swift.CustomStringConvertible {
    case low
    case medium
    case high
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var sessionSampleRate: Swift.Float
  @objc public var onErrorSampleRate: Swift.Float
  @objc public var maskAllText: Swift.Bool
  @objc public var maskAllImages: Swift.Bool
  @objc public var quality: Sentry.SentryReplayOptions.SentryReplayQuality
  @objc public var maskedViewClasses: [Swift.AnyClass]
  @objc public var unmaskedViewClasses: [Swift.AnyClass]
  @objc override dynamic public init()
  @objc public init(sessionSampleRate: Swift.Float = 0, onErrorSampleRate: Swift.Float = 0, maskAllText: Swift.Bool = true, maskAllImages: Swift.Bool = true)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(iOS 13.0, *)
@objcMembers public class SentryUserFeedbackConfiguration : ObjectiveC.NSObject {
  @objc public var configureWidget: ((Sentry.SentryUserFeedbackWidgetConfiguration) -> Swift.Void)?
  @objc public var useShakeGesture: Swift.Bool
  @objc public var showFormForScreenshots: Swift.Bool
  @objc public var configureForm: ((Sentry.SentryUserFeedbackFormConfiguration) -> Swift.Void)?
  @objc public var tags: [Swift.String : Any]?
  @objc public var useSentryUser: Swift.Bool
  @objc public var onFormOpen: (() -> Swift.Void)?
  @objc public var onFormClose: (() -> Swift.Void)?
  @objc public var onSubmitSuccess: (([Swift.String : Any]) -> Swift.Void)?
  @objc public var onSubmitError: ((any Swift.Error) -> Swift.Void)?
  @objc public var configureTheme: ((Sentry.SentryUserFeedbackThemeConfiguration) -> Swift.Void)?
  @objc public var configureDarkTheme: ((Sentry.SentryUserFeedbackThemeConfiguration) -> Swift.Void)?
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum SentryLevel : Swift.UInt {
  @objc(kSentryLevelNone) case none = 0
  @objc(kSentryLevelDebug) case debug = 1
  @objc(kSentryLevelInfo) case info = 2
  @objc(kSentryLevelWarning) case warning = 3
  @objc(kSentryLevelError) case error = 4
  @objc(kSentryLevelFatal) case fatal = 5
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
extension Sentry.SentryLevel : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @available(iOS 13.0, *)
@objcMembers public class SentryUserFeedbackThemeConfiguration : ObjectiveC.NSObject {
  @objc public var fontFamily: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var foreground: UIKit.UIColor
  @objc public var background: UIKit.UIColor
  @objc public var submitForeground: UIKit.UIColor
  @objc public var submitBackground: UIKit.UIColor
  @objc public var buttonForeground: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var buttonBackground: UIKit.UIColor
  @objc public var successColor: UIKit.UIColor
  @objc public var errorColor: UIKit.UIColor
  public struct OutlineStyle : Swift.Equatable {
    public var outlineColor: UIKit.UIColor
    public var cornerRadius: CoreFoundation.CGFloat
    public var outlineWidth: CoreFoundation.CGFloat
    public init(outlineColor: UIKit.UIColor = UIColor(white: 204 / 255, alpha: 1), cornerRadius: CoreFoundation.CGFloat = 5, outlineWidth: CoreFoundation.CGFloat = 0.5)
    public static func == (a: Sentry.SentryUserFeedbackThemeConfiguration.OutlineStyle, b: Sentry.SentryUserFeedbackThemeConfiguration.OutlineStyle) -> Swift.Bool
  }
  public var outlineStyle: Sentry.SentryUserFeedbackThemeConfiguration.OutlineStyle {
    get
    set
  }
  @objc public var inputBackground: UIKit.UIColor
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(iOS 13.0, *)
@objcMembers public class SentryUserFeedbackWidgetConfiguration : ObjectiveC.NSObject {
  @objc public var autoInject: Swift.Bool
  @objc public var animations: Swift.Bool
  @objc public var labelText: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var showIcon: Swift.Bool
  @objc public var widgetAccessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var windowLevel: UIKit.UIWindow.Level
  @objc public var location: UIKit.NSDirectionalRectEdge
  @objc public var layoutUIOffset: UIKit.UIOffset
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(iOS 13.0, *)
@objcMembers public class SentryUserFeedbackFormConfiguration : ObjectiveC.NSObject {
  @objc public var showBranding: Swift.Bool
  @objc public var formTitle: Swift.String
  @objc public var messageLabel: Swift.String
  @objc public var messagePlaceholder: Swift.String
  @objc public var messageTextViewAccessibilityLabel: Swift.String {
    @objc get
    @objc set
  }
  @objc public var isRequiredLabel: Swift.String
  @objc public var successMessageText: Swift.String
  @objc public var enableScreenshot: Swift.Bool
  @objc public var addScreenshotButtonLabel: Swift.String
  @objc public var addScreenshotButtonAccessibilityLabel: Swift.String {
    @objc get
    @objc set
  }
  @objc public var removeScreenshotButtonLabel: Swift.String
  @objc public var removeScreenshotButtonAccessibilityLabel: Swift.String {
    @objc get
    @objc set
  }
  @objc public var isNameRequired: Swift.Bool
  @objc public var showName: Swift.Bool
  @objc public var nameLabel: Swift.String
  @objc public var namePlaceholder: Swift.String
  @objc public var nameTextFieldAccessibilityLabel: Swift.String {
    @objc get
    @objc set
  }
  @objc public var isEmailRequired: Swift.Bool
  @objc public var showEmail: Swift.Bool
  @objc public var emailLabel: Swift.String
  @objc public var emailPlaceholder: Swift.String
  @objc public var emailTextFieldAccessibilityLabel: Swift.String {
    @objc get
    @objc set
  }
  @objc public var submitButtonLabel: Swift.String
  @objc public var submitButtonAccessibilityLabel: Swift.String {
    @objc get
    @objc set
  }
  @objc public var cancelButtonLabel: Swift.String
  @objc public var cancelButtonAccessibilityLabel: Swift.String {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func sentryReplayMask()
  @_Concurrency.MainActor(unsafe) public func sentryReplayUnmask()
}
@objc public protocol SentryIntegrationProtocol : ObjectiveC.NSObjectProtocol {
  @objc(installWithOptions:) func install(with options: Sentry.Options) -> Swift.Bool
  @objc func uninstall()
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class SentryId : ObjectiveC.NSObject, Swift.Sendable {
  @objc public static let empty: Sentry.SentryId
  @objc final public var sentryIdString: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc public init(uuid: Foundation.UUID)
  @objc(initWithUUIDString:) public init(uuidString: Swift.String)
  @objc override final public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override final public var description: Swift.String {
    @objc get
  }
  @objc override final public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
}
extension Swift.FixedWidthInteger {
  @discardableResult
  @inlinable postfix internal static func ++ (lhs: inout Self) -> Self {
        defer { lhs += 1 }
        return lhs
    }
}
extension Sentry.SentryTransactionNameSource : Swift.Equatable {}
extension Sentry.SentryTransactionNameSource : Swift.Hashable {}
extension Sentry.SentryTransactionNameSource : Swift.RawRepresentable {}
extension Sentry.SentryReplayOptions.SentryReplayQuality : Swift.Equatable {}
extension Sentry.SentryReplayOptions.SentryReplayQuality : Swift.Hashable {}
extension Sentry.SentryReplayOptions.SentryReplayQuality : Swift.RawRepresentable {}
extension Sentry.SentryLevel : Swift.Equatable {}
extension Sentry.SentryLevel : Swift.Hashable {}
extension Sentry.SentryLevel : Swift.RawRepresentable {}
